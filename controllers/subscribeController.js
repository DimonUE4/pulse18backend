

const User = require('../models/User');
const Subscription = require('../models/Subscription');
const Notification = require('../models/notification');

exports.subscribeToModel = async (req, res) => {
  const modelId = req.params.modelId;
  const userId = req.user.id;

  try {
    const model = await User.findById(modelId);
    if (!model || model.role !== 'model') {
      return res.status(404).json({ message: '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const existing = await Subscription.findOne({ subscriber: userId, model: modelId });
    if (existing) {
      return res.status(400).json({ message: '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –º–æ–¥–µ–ª—å' });
    }

    const subscription = new Subscription({
      subscriber: userId,
      model: modelId,
      price: 100 // üí° —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–Ω–∞—Ç–∞ –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –º–æ–¥–µ–ª–∏
    if (!model.subscribers.includes(userId)) {
      model.subscribers.push(userId);
      await model.save();
    }

    await subscription.save();

    // ‚úÖ –°–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
    const subscriberUser = await User.findById(userId);

    await Notification.create({
      user: model._id,
      text: `@${subscriberUser.username} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤–∞—Å`,
      type: 'subscription'
    });
    

    res.status(201).json({
      message: '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞',
      subscription
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏' });
  }
};



// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.getMySubscriptions = async (req, res) => {
  try {
    const subscriptions = await Subscription.find({ subscriber: req.user.id })
      .populate('model', 'name username avatar');

    res.json({ subscriptions });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫' });
  }
};

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –¥–µ–ª–µ–Ω–∏–µ–º free / paid + activePlanId
exports.checkSubscription = async (req, res) => {
  try {
    const { modelId } = req.params;
    const userId = req.user.id;

    const allSubs = await Subscription.find({
      subscriber: userId,
      model: modelId,
      isActive: true
    });

    const free = allSubs.some(sub => sub.price === 0);
    const paidSub = allSubs.find(sub => sub.price > 0);

    res.json({
      subscribed: Boolean(free || paidSub),
      free,
      paid: Boolean(paidSub),
      activePlanId: paidSub?.planId || null
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏' });
  }
};



exports.getMySubscribers = async (req, res) => {
  try {
    const model = await User.findById(req.user.id).populate({
      path: 'subscribers',
      select: 'username name avatar createdAt lastActive'
    });

    if (!model || model.role !== 'model') {
      return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    }

    res.json({ subscribers: model.subscribers || [] });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –º–æ–¥–µ–ª–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};
