
const path = require('path');
const fs = require('fs');

const Post = require('../models/Post');

exports.createPost = async (req, res) => {
  try {
    const { text, price } = req.body;
    const mediaFiles = req.files || [];

    const mediaPaths = mediaFiles.map(file => '/uploads/' + file.filename);

    const newPost = new Post({
      author: req.user.id, // ‚úÖ –≤–æ—Ç —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
      text,
      price: parseFloat(price) || 0,
      media: mediaPaths
    });

    await newPost.save();
    res.status(201).json(newPost);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞' });
  }
};


exports.getMyPosts = async (req, res) => {
  try {
    const posts = await Post.find({ author: req.user.id })
      .populate('author', 'name username avatar') // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
      .sort({ createdAt: -1 });

    res.json(posts);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π (–¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –ª–µ–Ω—Ç—ã)
exports.getPublicFeed = async (req, res) => {
  try {
    const posts = await Post.find()
      .populate('author', 'name username avatar') // –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏–Ω—Ñ—É –æ–± –∞–≤—Ç–æ—Ä–µ
      .sort({ createdAt: -1 }); // –ø–æ –¥–∞—Ç–µ, –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É

    res.json(posts);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—É–±–ª–∏—á–Ω–æ–π –ª–µ–Ω—Ç—ã:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–µ–Ω—Ç—ã' });
  }
};


